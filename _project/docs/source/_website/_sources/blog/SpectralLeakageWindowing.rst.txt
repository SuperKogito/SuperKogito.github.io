[09-03-2020] Spectral leakage and windowing
============================================

.. meta::
   :description: Audio signal windowing and spectral leakage
   :keywords: windowing, spectral leakage, Ayoub Malek, Blogging
   :author: Ayoub Malek


.. post:: Mar 09, 2020
   :tags: [Signal processing]
   :category: Signal processing
   :author: Ayoub Malek
   :location: Munich
   :language: English

-----------------------

Windowing is an important part of almost any signal processing system, in order to remove/ reduce spectral leakage when processing a non-periodic signal's spectrum
This blog post provides a small overview of what is spectral usage and how to use windowing to avoid it.

| *** keywords:  *** Windowing, Spectral leakage


Introduction
-------------
In order to understand leakage, we have first to understand the Discrete Fourier transform (DFT) and the related assumptions.
When using the DFT to compute spectograms we signals to be periodic. In practice, this assumption is often not fulfilled, resulting
the original signal into :math:`\#F` blocks often called frames with length :math:`N_f` an overlap :math:`M` and a framing hop :math:`H (H = N_f - M)`.
Overlapping the frames help avoiding information loss in between adjacent frames.


What is spectral leakage ?
--------------------------
Spectral leakage, is a smearing of power across a frequency spectrum that occurs when the signal being measured is not periodic in the sample interval.
It occurs because discrete sampling results in the effective computation of a Fourier series of a waveform having discontinuities, which result in additional frequency components.
Leakage is a common error encountered in digital signal processing, that cannot be entirely eliminated but may be reduced using windowing.


What is windowing ?
--------------------
Windowing is a counter-measure against spectral leakage by reducing the amplitudes of the samples at the start and end of a signal window :cite:`lyon`.
This helps with the periodicity of the signal and reduces any leakage.
So in other words windowing is none other than a multiplication of the input signal with a windowing function.

.. math::
  :nowrap:

  \begin{eqnarray}
      S = \sum_{i=0}^{\#F-1} F[i] . w
  \end{eqnarray}

where:

- :math:`S`   : Signal array.
- :math:`\#F` : Number of frames.
- :math:`w`   : window function.


How to implement it?
---------------------
This is depending on the type of the windowing function to use as there are many.
However, since it is just a multiplication, the window samples are simply generated using a predefined function and multiplied with the signal samples.
In python this can be done easily using numpy_ which offers a wide variety of windowing_function_

Code
-----
Here is a small code snippet implementing windowing that I wrote as part of a python audio features extraction library named spafe_

.. code-block:: python
 :caption: Windowing
 :linenos:

  import numpy as np


  def windowing(frames, frame_len, win_type="hamming", beta=14):
      """
      generate and apply a window function to avoid spectral leakage.

      Args:
        frames  (array) : array including the overlapping frames.
        frame_len (int) : frame length.
        win_type  (str) : type of window to use.
        Default is "hamming"

      Returns:
        windowed frames.
      """
      if   win_type == "hamming" : windows = np.hamming(frame_len)
      elif win_type == "hanning" : windows = np.hanning(frame_len)
      elif win_type == "bartlet" : windows = np.bartlett(frame_len)
      elif win_type == "kaiser"  : windows = np.kaiser(frame_len, beta)
      elif win_type == "blackman": windows = np.blackman(frame_len)
      windowed_frames = frames * windows
      return windowed_frames



Conclusion
-------------
This blog presented framing, which is a fundamental signal processing technique to that divides a signal into multiple, equally sized, blocks.
The resulting blocks are considered stationary over time, which helps extract useful characterizing features of the signal.
This operation can be implemented in python in a classical fashion or using the stride trick for a fast processing.


References and Further readings
--------------------------------

.. bibliography:: references/windowing_refs.bib
   :cited:

.. _numpy : https://numpy.org/
.. _windowing_function : https://docs.scipy.org/doc/numpy/reference/routines.window.html
.. _spafe : https://github.com/SuperKogito/spafe
